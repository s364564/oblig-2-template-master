Index: src/main/java/no/oslomet/cs/algdat/Oblig2/DobbeltLenketListe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.oslomet.cs.algdat.Oblig2;\r\n\r\n\r\n////////////////// class DobbeltLenketListe //////////////////////////////\r\n\r\n\r\nimport java.util.Comparator;\r\nimport java.util.Iterator;\r\n\r\n\r\npublic class DobbeltLenketListe<T> implements Liste<T> {\r\n\r\n    /**\r\n     * Node class\r\n     *\r\n     * @param <T>\r\n     */\r\n    private static final class Node<T> {\r\n        private T verdi;                   // nodens verdi\r\n        private Node<T> forrige, neste;    // pekere\r\n\r\n        private Node(T verdi, Node<T> forrige, Node<T> neste) {\r\n            this.verdi = verdi;\r\n            this.forrige = forrige;\r\n            this.neste = neste;\r\n        }\r\n\r\n        private Node(T verdi) {\r\n            this(verdi, null, null);\r\n        }\r\n    }\r\n\r\n    // instansvariabler\r\n    private Node<T> hode;          // peker til den første i listen\r\n    private Node<T> hale;          // peker til den siste i listen\r\n    private int antall;            // antall noder i listen\r\n    private int endringer;         // antall endringer i listen\r\n\r\n    public DobbeltLenketListe() {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    public DobbeltLenketListe(T[] a) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    public Liste<T> subliste(int fra, int til) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public int antall() {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public boolean tom() {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public boolean leggInn(T verdi) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public void leggInn(int indeks, T verdi) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public boolean inneholder(T verdi) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public T hent(int indeks) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public int indeksTil(T verdi) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public T oppdater(int indeks, T nyverdi) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public boolean fjern(T verdi) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public T fjern(int indeks) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public void nullstill() {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    public String omvendtString() {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public Iterator<T> iterator() {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    public Iterator<T> iterator(int indeks) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    private class DobbeltLenketListeIterator implements Iterator<T> {\r\n        private Node<T> denne;\r\n        private boolean fjernOK;\r\n        private int iteratorendringer;\r\n\r\n        private DobbeltLenketListeIterator() {\r\n            denne = hode;     // p starter på den første i listen\r\n            fjernOK = false;  // blir sann når next() kalles\r\n            iteratorendringer = endringer;  // teller endringer\r\n        }\r\n\r\n        private DobbeltLenketListeIterator(int indeks) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public boolean hasNext() {\r\n            return denne != null;\r\n        }\r\n\r\n        @Override\r\n        public T next() {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public void remove() {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n    } // class DobbeltLenketListeIterator\r\n\r\n    public static <T> void sorter(Liste<T> liste, Comparator<? super T> c) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n} // class DobbeltLenketListe\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/no/oslomet/cs/algdat/Oblig2/DobbeltLenketListe.java b/src/main/java/no/oslomet/cs/algdat/Oblig2/DobbeltLenketListe.java
--- a/src/main/java/no/oslomet/cs/algdat/Oblig2/DobbeltLenketListe.java	(revision b50a25bb5163b41f3200a720df8d1702a4d0bf06)
+++ b/src/main/java/no/oslomet/cs/algdat/Oblig2/DobbeltLenketListe.java	(date 1665482600476)
@@ -60,7 +60,27 @@
 
     @Override
     public boolean leggInn(T verdi) {
-        throw new UnsupportedOperationException();
+        Node <T> p = new Node<>(verdi);
+        if(verdi == null){
+            throw new NullPointerException("Verdien kan ikke være null");
+        }
+
+        if ( (hode == null) && (hale == null) ) {      //Hvis listen er tom
+            hode = p;
+            hale = p;
+            antall += 1;
+            endringer += 1;
+        }
+        else {      //Dersom det finnes en eller flere noder i listen fra før
+            Node q = hale;
+            hale = p;
+            p.forrige = q;
+            q.neste = p;
+            antall += 1;
+            endringer +=1;
+        }
+
+        return true;
     }
 
     @Override
@@ -105,7 +125,20 @@
 
     @Override
     public String toString() {
-        throw new UnsupportedOperationException();
+        StringBuilder ut = new StringBuilder("[");
+
+        Node<T> p = hale;      // Setter node p til hale
+        while (p != null) {        // Hvis p er både hale og hode så finnes det kun et element i array
+            if (p == hode) {
+                ut.append(p.verdi);
+            } else {
+                ut.append(p.verdi).append(", ");
+            }
+            p = p.forrige;             // Går fra hale til hode med å sjekke elementet som var før det siste.
+        }
+        ut.append("]");
+
+        return ut.toString();       // Returnerer toString;
     }
 
     public String omvendtString() {
